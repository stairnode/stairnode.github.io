<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stairnode.github.io/news/article-50446.htm" />
    <title>Metalama简介2.利用Aspect在编译时进行消除重复代码</title>
        <meta name="description" content="上文介绍到Aspect是Metalama的核心概念，它本质上是一个编译时的AOP切片。下面我们就来系统说明一下Metalama中的Aspect。Metalama简介1. 不止是一个.NET跨平台的编译" />
        <link rel="icon" href="/assets/website/img/stairnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Stair Node免费订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stairnode.github.io/news/article-50446.htm" />
    <meta property="og:site_name" content="Stair Node免费订阅官网" />
    <meta property="og:title" content="Metalama简介2.利用Aspect在编译时进行消除重复代码" />
    <meta property="og:image" content="https://stairnode.github.io/uploads/20240805-1/f9b6f0cffab9cf6426b383f1a730eb81.webp" />
        <meta property="og:release_date" content="2025-02-03T09:26:39" />
    <meta property="og:updated_time" content="2025-02-03T09:26:39" />
        <meta property="og:description" content="上文介绍到Aspect是Metalama的核心概念，它本质上是一个编译时的AOP切片。下面我们就来系统说明一下Metalama中的Aspect。Metalama简介1. 不止是一个.NET跨平台的编译" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Metalama简介2.利用Aspect在编译时进行消除重复代码">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://stackpath.bootstrapcdn.com">

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Poppins:100,200,300,400,500,600,700,800,900" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/animate.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Y08WLH1WBP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Y08WLH1WBP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
            <a class="navbar-brand" href="/">
                        <span>Stair Node</span>
                        </a>
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav">
                                        <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link"><span>免费节点</span></a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link"><span>推荐机场</span></a></li>
                                        <li class="nav-item"><a href="/client.htm" class="nav-link"><span>客户端</span></a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link"><span>新闻资讯</span></a></li>
                                    </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap hero-wrap-2" style="background-image: url('/assets/website/img/stairnode/bg_4.jpg');" data-stellar-background-ratio="0.5">
        <div class="overlay"></div>
        <div class="container">
            <div class="row no-gutters slider-text align-items-end justify-content-center">
                <div class="col-md-9 ftco-animate pb-5 text-center">
                    <p class="breadcrumbs">
                        <span class="mr-2"><a href="/">首页 <i class="fa fa-chevron-right"></i></a></span> 
                        <span class="mr-2"><a href="/news/">新闻资讯 <i class="fa fa-chevron-right"></i></a></span> 
                        <span>正文</span>
                    </p>
                    <h1 class="mb-0 bread">Metalama简介2.利用Aspect在编译时进行消除重复代码</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about ftco-section ftco-no-pt ftco-no-pb my-5" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>上文介绍到<code>Aspect</code>是<code>Metalama</code>的核心概念，它本质上是一个编译时的AOP切片。下面我们就来系统说明一下<code>Metalama</code>中的<code>Aspect</code>。<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/chsword/p/metalama_1.html"  title="Metalama简介1. 不止是一个.NET跨平台的编译时AOP框架" target="_blank" rel="nofollow">Metalama简介1. 不止是一个.NET跨平台的编译时AOP框架</a></p> </h1> <ol> <li>关于Metalama中Aspect的基础</li> <li>一些关于Aspect的示例，最终目的是通过本篇的介绍，将在编译时自动为类型添加<code>INotifyPropertyChanged</code>，实现如下效果: <ol> <li>自动添加接口</li> <li>自动添加接口实现</li> <li>改写属性的set和get</li> </ol> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/012322e6bdb1b4a570d0ef9cda531134.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> </h1> <p>在前面的文章中我们已经介绍了使用<code>Metalama</code>编写简单的AOP。但是例子过于简单，也只是在代码前后加了两个<code>Console.WriteLine</code>，并没有太大的实际参考意义。下面我就以几个实际例子，来体现<code>Metalama</code>在复用代码方面的好处。<br /> 对于<code>Metalama</code>中的<code>Aspect</code>分为以下两种API</p> <p><strong>1.Aspect基础API</strong></p> <ul> <li>TypeAspect 对类型进行编译时代码插入,见示例3</li> <li>MethodAspect</li> <li>PropertyAspect</li> <li>ParameterAspect</li> <li>EventAspect</li> <li>FieldAspect</li> <li>FieldOrPropertyAspect</li> <li>ConstructorAspect</li> </ul> <p><strong>2.Override API（重写式API）</strong></p> <p>重写试API使用更方便、更直观,与上面基础API等价，但是更容易使用</p> <ul> <li>OverrideMethodAspect 对方法进行编译时代码插入，请见下面示例1</li> <li>OverrideFieldOrPropertyAspect 对字段或属性进行编译时代码插入，请见下面示例2</li> <li>OverrideEventAspect 对事件进行编译时插入代码</li> </ul> <p>以<code>MethodAspect</code> 和<code>OverrideMethodAspect</code> 为例，以下代码等价。</p> <p><strong>基础API MethodAspect</strong></p> <pre><code class="language-C#">    public class LogAttribute : MethodAspect     {         public override void BuildAspect(IAspectBuilder&lt;IMethod&gt; builder)         {            // 为方法添加重写            builder.Advices.OverrideMethod(builder.Target,nameof(this.MethodLog));         }         [Template]// 这个Template必须要加         public dynamic MethodLog()         {             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 开始运行.");             var result = meta.Proceed();             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 结束运行.");             return result;         }     }</code></pre> <p><strong>Override API</strong></p> <pre><code class="language-C#">    public class LogAttribute : OverrideMethodAspect     {         public override dynamic? OverrideMethod()         {             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 开始运行.");             var result = meta.Proceed();             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 结束运行.");             return result;         }     }</code></pre> <p>下面针对各种情况举一些试例。<br /> 根据每个例子的不同也分别介绍如何对方法、字段、属性进行重写。</p> </h1> <p>通过上面的示例我们可以看到，无论是在<code>基础API</code>中还是<code>Override API</code>中，在定义AOP方法时，都使用到了<code>meta</code>。<code>meta</code>是一个方便在<code>Aspect</code>中访问当前AOP上下文的工具类<br /> 常用的成员有：</p> <table> <thead> <tr> <th>成员</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td><code>meta.Proceed()</code></td> <td>等同于执行AOP作用目标直接执行，例如方法Aspect中就是原方法直接执行，属性的get中就是获取值，属性的Set中就是赋值value</td> </tr> <tr> <td><code>meta.Target</code></td> <td>当前AOP的作用目标，如作用目标是个方法则通过<code>meta.Target.Method</code> 调用，如果目标是个属性则通过<code>meta.Target.Propery</code> 调用</td> </tr> <tr> <td><code>meta.This</code></td> <td>等同于使用在AOP作用目标中的<code>this</code>，例如可以用于获取AOP目标所在类的其它属性，方法</td> </tr> <tr> <td><code>meta.ThisStatic</code></td> <td>用于访问AOP作用目标中的静态类型</td> </tr> </tbody> </table> </h1> <p>在平时的代码中，有这种场景，例如，我<strong>调用一个方法或API</strong>，他有一定的概率失败，例如发生了<strong>网络异常</strong>，所以我们就要设定一个重试机制（以重试3次然后放弃为例）。<br /> 假设我们有一个方法，代码详见示例中的<code>RetryDemo</code>。</p> <pre><code class="language-C#">    static int _callCount;     // 此方法第一二次调用会失败，第三次会成功     static void MyMethod()     {         _callCount++;         Console.WriteLine($"当前是第{_callCount}次调用.");         if (_callCount &lt;= 2)         {             Console.WriteLine("前两次直接抛异常:-(");             throw new TimeoutException();         }         else         {             Console.WriteLine("成功 :-)");         }     }</code></pre> <p>如果我们直接编写代码，可以使用类似以下逻辑处理。</p> <pre><code class="language-C#">        for (int i = 0; i &lt; 3; i++)         {             try             {                 MyMethod();                 break;             }             catch (Exception ex)             {                 // Console.WriteLine(ex);             }         }</code></pre> <p>这样的话，对于不同的方法我们就会出现大量的重试逻辑。<br /> 那么使用<code>Metalama</code>我们如何进行代码改造，去掉复用代码呢。<br /> 第一步，我们需要创建一个可以修改方法的AOP的<code>Attribute</code>,如下：</p> <pre><code class="language-C#">internal class RetryAttribute : OverrideMethodAspect {     // 重试次数     public int RetryCount { get; set; } = 3;     // 应用到方法的切面模板     public override dynamic? OverrideMethod()     {         for (var i = 0; ; i++)         {             try             {                 return meta.Proceed(); // 这是实际调用方法的位置             }             catch (Exception e) when (i &lt; this.RetryCount)             {                 Console.WriteLine($"发生异常 {e.Message.GetType().Name}. 1秒后重试.");                 Thread.Sleep(1000);             }         }     } }</code></pre> <p>这里可以看到定义这个Attribute时，使用了<code>Metalama</code>提供的基类<code>OverrideMethodAspect</code>此基类是用于为方法添加编译时切面代码的<code>Attribute</code>.<br /> 然后我们将这个<code>Attribute</code>加到方法定义上。</p> <pre><code class="language-C#">    static int _callCount;      [Retry(RetryCount = 5)]     static void MyMethod()     {         _callCount++;         Console.WriteLine($"当前是第{_callCount}次调用.");         if (_callCount &lt;= 2)         {             Console.WriteLine("前两次直接抛异常:-(");             throw new TimeoutException();         }         else         {             Console.WriteLine("成功 :-)");         }     }</code></pre> <p>这样在编译时<code>Metalama</code>就会将代码编译为如下图所示。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5272474a2fe74a1b414a74fbec502b63.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> <p>而<code>RetryAttribute</code>编译后则会变为</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c6f0fd9439ae041ef99ff415aca02d8a.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> <p>也就是会将原有的<code>OverrideMethod</code>自动实现为<code>throw new System.NotSupportedException("Compile-time-only code cannot be called at run-time.")</code>。<br /> 最终调用结果为</p> <pre><code class="language-cmd">当前是第1次调用. 前两次直接抛异常:-( 发生异常 String. 1秒后重试. 当前是第2次调用. 前两次直接抛异常:-( 发生异常 String. 1秒后重试. 当前是第3次调用. 成功 :-)</code></pre> <p>源代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/chsword/metalama-demo/tree/main/src/RetryDemo"  target="_blank" rel="nofollow">https://github.com/chsword/metalama-demo/tree/main/src/RetryDemo</a></p> </h1> <p>在很多处理逻辑中我们会用到<code>INotifyPropertyChanged</code>如我们要获取以下类的属性更改：</p> <pre><code class="language-C#">public class MyModel {     public int Id { get; set; }     public string Name { get; set; } }</code></pre> <p>我们可以这么做：</p> <pre><code class="language-C#">using System.ComponentModel; public class MyModel: INotifyPropertyChanged {     private int _id { get; set; }     public int Id {         get {             return _id;         }         set         {             if (this._id != value)             {                 this._id = value;                 this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Id"));             }         }     }     private string _name;     public string Name     {         get         {             return _name;         }         set         {             if (this._name != value)             {                 this._name = value;                 this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Name"));             }         }     }     public event PropertyChangedEventHandler? PropertyChanged; }</code></pre> <p>但是这里，要将自动属性进行展开，并产生大量字段，对于这里的重复代码，我们可以用<code>Metalama进行处理</code>，我们最终要代码实现为如下：</p> <pre><code class="language-C#">public class MyModel: INotifyPropertyChanged {     [NotifyPropertyChanged]     public int Id { get; set; }     [NotifyPropertyChanged]     public string Name { get; set; }      public event PropertyChangedEventHandler? PropertyChanged; }</code></pre> <p>当然我们也要实现<code>NotifyPropertyChangedAttribute</code>:</p> <pre><code class="language-C#">public class NotifyPropertyChangedAttribute : OverrideFieldOrPropertyAspect {     public override dynamic OverrideProperty     {         // 保留原本get的逻辑         get =&gt; meta.Proceed();         set         {             // 判断当前属性的Value与传入value是否相等             if (meta.Target.Property.Value != value)             {                 // 原本set的逻辑                 meta.Proceed();                 // 这里的This等同于调用类的This                 meta.This.PropertyChanged?.Invoke(meta.This, new PropertyChangedEventArgs(meta.Target.Property.Name));             }         }     } }</code></pre> <p>这样就可以实现上面相同的效果。</p> <p>源代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/chsword/metalama-demo/tree/main/src/PropertyDemo"  target="_blank" rel="nofollow">https://github.com/chsword/metalama-demo/tree/main/src/PropertyDemo</a></p> </h1> <p>刚才对属性在编译时生成<code>INotifyPropertyChanged</code>实现的代码中，其实可以再进一步优化，<code>INotifyPropertyChanged</code>接口的实现也可以通过<code>Metalama</code>进一步省去，最终代码为：</p> <pre><code class="language-C#">[TypeNotifyPropertyChanged] public class MyModel {     public int Id { get; set; }     public string Name { get; set; } }</code></pre> <p>那么<code>TypeNotifyPropertyChangedAttribute</code>又应该怎么实现呢，Type Aspect并没有对应的Override实现，所以要使用TypeAspect。</p> <pre><code class="language-C#">internal class TypeNotifyPropertyChangedAttribute : TypeAspect {     public override void BuildAspect(IAspectBuilder&lt;INamedType&gt; builder)     {         // 当前类实现一个接口         builder.Advices.ImplementInterface(builder.Target, typeof(INotifyPropertyChanged));         // 获取所有符合要求的属性         var props = builder.Target.Properties.Where(p =&gt; !p.IsAbstract &amp;&amp; p.Writeability == Writeability.All);         foreach (var property in props)         {             //用OverridePropertySetter重写属性或字段             //参数1 要重写的属性 参数2 新的get实现 参数3 新的set实现             builder.Advices.OverrideFieldOrPropertyAccessors(property, null, nameof(this.OverridePropertySetter));         }     }     // Interface 要实现什么成员     [InterfaceMember]     public event PropertyChangedEventHandler? PropertyChanged;      // 也可以没有这个方法，直接调用 meta.This 这里只是展示另一种调用方式，更加直观     [Introduce(WhenExists = OverrideStrategy.Ignore)]     protected void OnPropertyChanged(string name)     {         this.PropertyChanged?.Invoke(meta.This, new PropertyChangedEventArgs(name));     }      // 重写set的模板     [Template]     private dynamic OverridePropertySetter(dynamic value)     {         if (value != meta.Target.Property.Value)         {             meta.Proceed();             this.OnPropertyChanged(meta.Target.Property.Name);         }          return value;     } }</code></pre> <p>这样就可以实现和以上相同效果的代码，以后再添加实现<code>INotifyPropertyChanged</code>的类，只要添加以上Attribute即可。</p> <p>源代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/chsword/metalama-demo/tree/main/src/TypeDemo"  target="_blank" rel="nofollow">https://github.com/chsword/metalama-demo/tree/main/src/TypeDemo</a></p> </h1> <p>上面的示例3中，其实对方法还是有一定入侵的，至少要标记一个Attribute，<code>Metalama</code>还提供了其它无入侵的方式来为类或方法添加<code>Aspect</code>，我们将在后面来介绍。</p> <p>先上个代码</p> <pre><code class="language-C#">internal class Fabric : ProjectFabric {     public override void AmendProject(IProjectAmender amender)     {         // 添加 TypeNotifyPropertyChangedAttribute 到符合规则的类上         // 当前筛选以 Model 结尾的本项目中的类型添加 TypeNotifyPropertyChangedAttribute          amender.WithTargetMembers(c =&gt;             c.Types.Where(t =&gt; t.Name.EndsWith("Model"))             ).AddAspect(t =&gt; new TypeNotifyPropertyChangedAttribute());     } }</code></pre> </h1> <p>调试 Aspect 的<code>Attribute</code>时，尚不能使用断点直接调试，但可以通过以下方法：<br /> 在编译配置中除<code>Debug</code>或<code>Release</code>外还有一个<code>LamaDebug</code>。选择使用<code>LamaDebug</code>即可直接对<code>Metalama</code>的项目进行调试。</p> <ol> <li>在编译时就会调用的内容中，如BuildAspect,使用<code>System.Diagnostics.Debugger.Break()</code>.</li> <li>在Template方法或Override中, 使用<code>meta.DebugBreak</code>。</li> </ol> <p>如果是想以附加进程等方式添加断点调试，可以参考官方文档<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://doc.metalama.net/aspects/debugging-aspects"  target="_blank" rel="nofollow">https://doc.metalama.net/aspects/debugging-aspects</a></p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/news/article-49934.htm">宠物领养合同违约金3000合法吗怎么赔偿 宠物领养合同违约金3000合法吗怎么赔偿呢</a></p>
                                                        <p>下一个：<a href="/news/article-50447.htm">动物疫苗贵吗现在多少钱啊一针（动物疫苗要打几针）</a></p>
                                                    </div>

                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-48926.htm" title="狗粮牌子图片高清（狗粮品牌logo）">狗粮牌子图片高清（狗粮品牌logo）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-18-free-subscribe-node.htm" title="2月18日 | Stair Node节点订阅每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐">2月18日 | Stair Node节点订阅每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-41481.htm" title="vuex几大模块和Vuex助手使用详解">vuex几大模块和Vuex助手使用详解</a></li>
                        <li class="py-2"><a href="/news/article-65159.htm" title="CSS 修改滚动条样式 隐藏浏览器滚动条">CSS 修改滚动条样式 隐藏浏览器滚动条</a></li>
                        <li class="py-2"><a href="/news/article-37040.htm" title="猫咪打疫苗多少钱一支（猫咪打疫苗多少钱一支啊）">猫咪打疫苗多少钱一支（猫咪打疫苗多少钱一支啊）</a></li>
                        <li class="py-2"><a href="/news/article-41482.htm" title="事务的隔离级别与MVCC">事务的隔离级别与MVCC</a></li>
                        <li class="py-2"><a href="/news/article-38509.htm" title="宠物粮食行业发展前景如何知乎论文 宠物粮食行业发展前景如何知乎论文">宠物粮食行业发展前景如何知乎论文 宠物粮食行业发展前景如何知乎论文</a></li>
                        <li class="py-2"><a href="/news/article-56935.htm" title="2021公务员考试国考报名条件及流程（公务员国考报考指南）">2021公务员考试国考报名条件及流程（公务员国考报考指南）</a></li>
                        <li class="py-2"><a href="/news/article-43472.htm" title="宠物美容师真实现状怎么写简历（宠物美容师的发展前景）">宠物美容师真实现状怎么写简历（宠物美容师的发展前景）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-free-node-subscribe-links.htm" title="2月19日 | Stair Node节点订阅每天更新18.8M/S免费节点订阅链接，付费节点订阅推荐">2月19日 | Stair Node节点订阅每天更新18.8M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        Stair Node免费订阅官网 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/website/js/frontend/stairnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/popper.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/scrollax.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>