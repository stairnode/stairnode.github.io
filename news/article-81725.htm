<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stairnode.github.io/news/article-81725.htm" />
    <title>理解OIDC协议和认证机制</title>
        <meta name="description" content="当互联网应用越来越多，每个应用程序都实现了自己的身份存储、认证和授权，用户需要在应用上反复的注册与登录，体验糟糕，用户身份信息无法在多个应用间共享与同步。当使用企业应用时，企业提供了一系列应用，尽管是" />
        <link rel="icon" href="/assets/website/img/stairnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Stair Node免费订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stairnode.github.io/news/article-81725.htm" />
    <meta property="og:site_name" content="Stair Node免费订阅官网" />
    <meta property="og:title" content="理解OIDC协议和认证机制" />
    <meta property="og:image" content="https://stairnode.github.io/uploads/20240805-1/544ef092efd76ad954a27ec916535f0e.webp" />
        <meta property="og:release_date" content="2025-03-26T08:56:02" />
    <meta property="og:updated_time" content="2025-03-26T08:56:02" />
        <meta property="og:description" content="当互联网应用越来越多，每个应用程序都实现了自己的身份存储、认证和授权，用户需要在应用上反复的注册与登录，体验糟糕，用户身份信息无法在多个应用间共享与同步。当使用企业应用时，企业提供了一系列应用，尽管是" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="理解OIDC协议和认证机制">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://stackpath.bootstrapcdn.com">

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Poppins:100,200,300,400,500,600,700,800,900" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/animate.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Y08WLH1WBP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Y08WLH1WBP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
            <a class="navbar-brand" href="/">
                        <span>Stair Node</span>
                        </a>
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav">
                                        <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link"><span>免费节点</span></a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link"><span>推荐机场</span></a></li>
                                        <li class="nav-item"><a href="/client.htm" class="nav-link"><span>客户端</span></a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link"><span>新闻资讯</span></a></li>
                                    </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap hero-wrap-2" style="background-image: url('/assets/website/img/stairnode/bg_4.jpg');" data-stellar-background-ratio="0.5">
        <div class="overlay"></div>
        <div class="container">
            <div class="row no-gutters slider-text align-items-end justify-content-center">
                <div class="col-md-9 ftco-animate pb-5 text-center">
                    <p class="breadcrumbs">
                        <span class="mr-2"><a href="/">首页 <i class="fa fa-chevron-right"></i></a></span> 
                        <span class="mr-2"><a href="/news/">新闻资讯 <i class="fa fa-chevron-right"></i></a></span> 
                        <span>正文</span>
                    </p>
                    <h1 class="mb-0 bread">理解OIDC协议和认证机制</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about ftco-section ftco-no-pt ftco-no-pb my-5" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>当互联网应用越来越多，每个应用程序都实现了自己的身份存储、认证和授权，用户需要在应用上反复的注册与登录，体验糟糕，用户身份信息无法在多个应用间共享与同步。当使用企业应用时，企业提供了一系列应用，尽管是同一用户操作，但还是不得不切换注册与登录。</p> <p>是否可以有那么一种方式，我在某个代理网站注册一个账号，如果登录其他网站时，其他网站可以到代理网站去获取信息。只要代理网站足够富有生命力，那么总是可以省略很多乏味的注册登录流程。</p> <p>这些想法在技术的发展过程中出现了，如WS-Federation、SAML2.0、OpenID、OAuth、OIDC...</p> <h2 id="openidoauth发展历史">OpenID&amp;OAuth发展历史</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a8f0d004f497cf8764cdf1d95f72a386.jpg" alt="理解OIDC协议和认证机制"></p> <p>还有一些修订和扩展，此处就不体现了，主要是想聚焦于OpenID和OAuth是不一样的。</p> <ul> <li>OpenID是面向身份认证，对用户身份进行认证判断是否有效。</li> <li>OAuth是面向授权过程，在已知当前用户身份合法后，控制用户能够访问的资源，考虑保护被访问的资源。 </li> </ul> <h2 id="openid">OpenID</h2> <p>OpenID是一个去中心化的网上身份认证系统。对于支持OpenID的网站，用户不需要记住像用户名和密码这样的传统认证标记。取而代之的是，他们只需要预先在一个作为OpenID身份提供者（identity provider, IdP）的网站上注册。OpenID是去中心化的，任何网站都可以使用OpenID来作为用户登录的一种方式，任何网站也都可以作为OpenID身份提供者。OpenID既解决了注册问题而又不需要依赖于中心性的网站来确认数字身份。</p> <p>OpenID给用户提供一个统一网络身份，遵守OpenID网络身份，遵守OpenID协议的应用网站<strong>（在OpenId术语里叫Relying Parties，即RP）</strong>需要用户登录时，引导用户到第三方OpenID身份提供方<strong>（OpenId术语里叫OpenID identity provider，即OP）</strong>去认证，认证通过即登录成功。这样就省去了每个应用网站注册、登录的烦恼与乏味。解决了最开始提到的一个问题，各应用需要独立完成注册与登录流程，需要实现与维护独立的用户数据库。</p> <h2 id="oauth">OAuth</h2> <p>OAuth是一个授权协议，解决的是应用可以访问用户在另一应用上的某些授权资源，但此应用不需要知道用户在另一应用上的账户密码，即无需向另一应用透露用户的凭据便可以访问另一应用上受控的资源。</p> <ul> <li>2006年11月，当时布莱恩·库克正在开发Twitter的OpenID实现。与此同时，社交书签网站Ma.gnolia需要一个解决方案允许使用OpenID的成员授权Dashboard访问他们的服务。这样库克、克里斯·梅西纳和来自Ma.gnolia的拉里·哈尔夫（Larry Halff）与戴维·雷科尔顿会面讨论在Twitter和Ma.gnolia API上使用OpenID进行委托授权。但他们讨论得出结论，认为OpenID没有完成API访问委托的开放标准。</li> <li>2007年4月，成立了OAuth讨论组，这个由实现者组成的小组撰写了一个开放协议的提议草案。来自Google的德维特·克林顿获悉OAuth项目后，表示他有兴趣支持这个工作。</li> <li>2007年7月，团队起草了最初的规范。随后，Eran Hammer-Lahav加入团队并协调了许多OAuth的稿件，创建了更为正式的规范。</li> <li>2007年10月，OAuth Core 1.0最后的草案发布了。</li> <li>2008年11月，在明尼阿波利斯举行的互联网工程任务组第73次会议上，举行了OAuth的BoF讨论将该协议纳入IETF做进一步的规范化工作。这个会议参加的人很多，关于正式地授权在IETF设立一个OAuth工作组这一议题得到了广泛的支持。</li> <li>2010年4月，OAuth 1.0协议发表为RFC 5849，一个非正式RFC。</li> <li>2012年10月，OAuth 2.0发布，正式发表为RFC 6749。OAuth 2.0是OAuth协议的下一版本，但不向下兼容OAuth 1.0。OAuth 2.0关注客户端开发者的简易性，同时为Web应用、桌面应用、手机和智能设备提供专门的认证流程。 </li> </ul> <h2 id="open-id-connect">Open ID Connect</h2> <p>OpenID团队本来希望用户使用OpenID来进行身份认证， 但因为授权过程包括认证过程作为一部分，所以授权意味着经过了认证这一过程。由此，一些用户选择了OAuth身份认证的简易性，并且由于“管理用户凭据的任务可以委托给外部服务”以及“因为新用户注册过程可以省略，使用该服务的障碍变得更低”等优点而迅速占据主导地位，使用OAuth2.0作为身份认证的趋势变得流行。</p> <p>OpenID团队不得不承认用户更喜欢OAuth2.0，因此，他们在OAuth之上定义了一个新的身份认证规范<strong>O</strong>pen<strong>ID</strong><strong>C</strong>onnect(OIDC)，这个规范基于OAuth2.0进行了小幅扩展，在OAuth2.0上构建了身份层，使其可用作身份认证协议。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/40dd24271cdfef22a8f78033c6bfcdda.jpg" alt="理解OIDC协议和认证机制"></p> <p>即OpenID Connect (OIDC) 是基于 OAuth 2.0 构建的身份认证协议。</p> <blockquote> <p>OpenID+OAuth 2.0=OpenID Connect</p> </blockquote> <p></p> <h3 id="oidc主要术语">OIDC主要术语</h3> <ul> <li>Claim: 声明信息，简要格式展示(如身份证上格式)。</li> <li>Claims Provider: 声明信息提供方(如OAuth2.0中的Authorization Server能够返回Id token，其中携带着声明信息)。</li> <li><strong>End-User(EU)</strong>: 人类参与者(完成认证活动的人)。</li> <li>ID Token: 包含EU身份信息的声明(Claim)，以JWT(Json Web Token)格式进行存储传递。JWT具有自包含性、紧凑性和防篡改机制等特点。使得ID Token可以安全的传递给第三方应用并且容易被验证。</li> <li><strong>OpenID Provider (OP)</strong>: 提供身份认证的服务方，OAuth2.0中的Authorization Server(授权服务器)，用来提供身份认证服务以及返回Claim信息给第三方应用(Relying Party)。</li> <li><strong>Relying Party (RP)</strong>：受信任的第三方应用(OAuth2.0中的Client)，需要EU完成鉴权，并从OP处获得Claim信息的应用。</li> <li>UserInfo Endpoint：用户信息的接口，当RP使用Access token请求该接口时，能够返回当前用户的身份信息。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/1133736/202203/1133736-20220331223349065-956728770.png" alt="理解OIDC协议和认证机制"></li> </ul> <p></p> <h3 id="oidc协议簇">OIDC协议簇</h3> <p>OIDC由一系列规范文档组成，包括一个核心文档和多个可选支持的文档来提供扩展支持：</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-core-1_0.html"  target="_blank" rel="nofollow">Core</a>：必选。定义了OIDC核心的功能，在OAuth 2.0之上构建身份认证，以及使用声明(如身份证上的简要描述)方式来传递用户的信息。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-discovery-1_0.html"  target="_blank" rel="nofollow">Discovery</a>：可选。定义了第三方应用如何动态发现OIDC服务提供方元数据文档(比如提供的服务地址，采用的加密方法，支持的授权类型等等）。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">D</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">ynam</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">ic</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow"> R</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">e</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">gist</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">r</a><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-registration-1_0.html"  target="_blank" rel="nofollow">ation</a>：可选。定义了第三方应用如何注册到OIDC身份提供方。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html"  target="_blank" rel="nofollow">OAuth 2.0 Multiple Response Types</a>：定义了几种新的为OAuth2.0响应方式(原来常见的授权码code、隐式授权token基础上增加了id_token以及混合code、token和id_token的方式)。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html"  target="_blank" rel="nofollow">OAuth 2.0 Form Post Response Mode</a>：可选。在OAuth2.0的响应参数上扩展了OIDC所需的参数。提供了基于form表单响应信息的模式，使用post请求类型传给第三方应用，响应参数以application/x-www-form-urlencoded格式存储body中。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/specs/openid-connect-rpinitiated-1_0.html"  target="_blank" rel="nofollow">RP-Initiated Logout</a>:&nbsp;可选。定义了第三方应用如何注销当前登录用户的机制。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-session-1_0.html"  target="_blank" rel="nofollow">Session Management</a>：可选。定义了如何管理OIDC上已登录用户的会话数据，以便当OP上的用户注销时，也能够方便在RP上注销。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-frontchannel-1_0.html"  target="_blank" rel="nofollow">Front-Channel Logout</a>：可选。基于前端的注销机制，使得第三方应用不需要嵌入认证服务方的iframe来注销。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://openid.net/specs/openid-connect-backchannel-1_0.html"  target="_blank" rel="nofollow">Back-Channel Logout</a>：可选。基于后端的注销机制，定义了RP和OP直接如何通信来完成注销。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/specs/openid-connect-federation-1_0.html"  target="_blank" rel="nofollow">OpenID Connect Federation</a>:&nbsp;可选。定义了如何在OP和RP间建立可靠的信任的机制。</li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/specs/openid-connect-prompt-create-1_0.html"  target="_blank" rel="nofollow">Initiating User Registration via OpenID Connect</a>:&nbsp;可选。提供一种方式允许在RP指示下，能够在OP上注册用户的机制。<br /> 如下图所示，上部分描述OIDC的协议簇，以及其中最为核心的Core规范。下部分是作为支撑OIDC的其他协议规范。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e194fe9af484e69ae78a3074515a930a.jpg" alt="理解OIDC协议和认证机制"></p> <p>对于这些协议来讲，可能看着就难受，简要了解个概念即可，实际开发时这些都会逐渐浮出水面。</p> <p></p> <h2 id="oidcopenid20差异">OIDC&amp;OpenID2.0差异</h2> <ul> <li>OpenID Connect执行许多与OpenID 2.0相同的任务，但是API更友好且可使用在原生应用和移动应用。</li> <li>OpenID Connect 定义了用于可靠签名和加密的可选机制。</li> <li>OAuth 1.0a和OpenID 2.0的集成需要扩展，而OIDC本身集成了OAuth2.0。 </li> </ul> <h2 id="oidcoauth20差异">OIDC&amp;OAuth2.0差异</h2> <p>OIDC仍然使用OAuth中的授权服务器将用户身份认证信息以Id token的方式给到第三方应用，第三方应用可以验证用户标识并从中获取用户的基本信息以及通过OAuth2.0的授权流程访问用户的详细信息。如下图所示，对于用户认证部分采用认证协议如WS-Fed、OIDC等，对于资源的访问控制以OAuth2.0协议为主。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4019a4c5e89203bab77b968e9a1c6b22.jpg" alt="理解OIDC协议和认证机制"></p> <p>OIDC中的Id token和OAuth2.0中核心的Access token各自效力或是关注的部分不同。</p> <ul> <li>OAuth2提供了<code>Access Token</code>来解决授权第三方应用访问受保护资源的问题；</li> <li>OIDC遵循OAuth2.0协议流程在这个基础上提供了<code>ID Token</code>来解决第三方应用标识用户身份的问题。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/1133736/202203/1133736-20220331223348973-358140812.png" alt="理解OIDC协议和认证机制"></li> </ul> <p></p> <h2 id="oidc抽象流程">OIDC抽象流程</h2> <p>OIDC的流程主要由以下5个步骤构成：</p> <ol> <li>第三方应用(RP)发送认证请求到认证服务方(OP)</li> <li>用户在认证页面进行认证与选择授权内容</li> <li>认证服务方(OP)对认证请求进行验证，发送Id token及Access token给第三方应用(RP)</li> <li>第三方应用可使用Access token请求用户信息或其他授权内的资源</li> <li>资源服务对Access token校验并返回用户信息或资源<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/1133736/202203/1133736-20220331223349061-1734512507.png" alt="理解OIDC协议和认证机制"></li> </ol> <p>流程上，在OAuth2.0中授权码模式和隐式授权模式下，OIDC和OAuth2.0是一样的，但有几个授权模式在某些情况下，在OIDC中就不存在了，当用户无需经过身份认证过程即可获得Access token，比如如下两种模式。</p> <ul> <li>资源所有者密码凭证授权(Resource Owner Password Credentials Grant)：第三方应用能够获取到用户的登录凭证就直接可以向授权服务器请求Access token，如此，就去掉了标识用户身份这一过程了。</li> <li>客户端凭证授权(Client Credentials Grant)：这种是标识客户端，直接的参与者人都没有加入到流程中，也不存在标识用户是谁了。</li> </ul> <p></p> <h2 id="oidc的几种认证方式">OIDC的几种认证方式</h2> <p>OIDC的认证流程主要是由OAuth2的几种授权流程延伸而来的，主要有以下3种：</p> <ul> <li>授权码流程(Authorization Code Flow)：基于OAuth2的授权码流程，在原来code换取Access token的基础上增加了一个Id token。</li> <li>隐式流程(Implicit Flow)：基于OAuth2的隐式流程，在原来从授权服务器重定向到第三方应用仅返回Access token的基础上增加了一个Id token。</li> <li>混合流程(Hybrid Flow)：混合了授权码流程(Authorization Code Flow)和隐式流程(Implici Flow)，能够按照参数配置的不同，控制Id token的返回位置与Access token的有无。<br /> 注意：如上省略了Refresh token，关注于Id token和Access token。</li> </ul> <p></p> <h3 id="授权码流程">授权码流程</h3> <p>1、第三方应用通过浏览器重定向到授权服务器(OP)的认证页面来进行用户认证与执行授权流程。重定向时使用的参数是基于OAuth2.0中的大部分参数。主要如下几个</p> <ul> <li>scope：必选。选择的授权范围，当是OIDC请求时，需要包含openid选项，如下示例所示。</li> <li>response_type：必选。响应类型方式，使用授权码流程时，为code.</li> <li>client_id：必选。第三方应用提前在授权服务器处注册得到的id值。</li> <li>redirect_uri：必选。重定向到OP认证授权完毕后重定向到RP的地址。</li> <li>state：推荐。第三方应用(RP)提供的一个字符串，授权服务器(OP)会原样返回给第三方应用(RP)，以阻止CSRF攻击。<br /> 如上几个是常使用到的授权码流程中所需的参数，实际上还有许多其他参数可以依照不同场景的需要使用上。其他参数信息<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest"  target="_blank" rel="nofollow">https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest</a></li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1eb96c9bb5165dae8bbcda10cfaf3368.jpg" alt="理解OIDC协议和认证机制"></p> <p>2、当用户完成认证信息填写与执行授权操作后，授权服务器(OP)对用户认证信息的审核和授权范围的校验。有效后重定向到第三方应用(RP)指定的回调地址(第1步中的redirect_uri)，将code和state参数作为查询参数附加在回调地址后。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ebed675fcd21d710a20064cae207ab13.jpg" alt="理解OIDC协议和认证机制"><br /> 3、第三方应用(RP)通过code来请求认证服务方的Token EndPoint换取Token。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/792d1c96228d334c5307e5491e87a24b.jpg" alt="理解OIDC协议和认证机制"></p> <p>然后Token EndPoint会返回响应的Token，其中除了OAuth2规定的部分数据外，还会附加一个<strong>id_token</strong>的字段。</p> <pre><code class="language-json">{ &nbsp; &nbsp; "access_token": "SlAV32hkKG", &nbsp; &nbsp; "token_type": "Bearer", &nbsp; &nbsp; "refresh_token": "8xLOxBtZp8", &nbsp; &nbsp; "expires_in": 3600, &nbsp; &nbsp; "id_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c" }</code></pre> <p>4、请求用户信息或授权内的资源。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7a7a3672a20631a5afac03955d47480c.jpg" alt="理解OIDC协议和认证机制"></p> <p></p> <h3 id="隐式流程">隐式流程</h3> <p>在OAuth2.0中，隐式授权使用的response_type是token，而在OIDC中，变为了id_token token或是仅id_token，当仅使用id_token时，则不会返回Access token了。其余参数则和OAuth2.0中的隐式授权一致。但OIDC中相比OAuth2.0隐式流程额外增加了一个参数nonce</p> <ul> <li>nonce：必填。字符串值，用于将第三方应用的会话与 Id token关联，并缓解重放攻击。该值未经修改地从身份验证请求传递到 Id token中。为了防止攻击者猜中值，随机数值中必须存在足够的熵。</li> </ul> <p>注意：隐式流程中OAuth2.0的state和OIDC的nonce区别</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://stackoverflow.com/questions/46844285/difference-between-oauth-2-0-state-and-openid-nonce-parameter-why-state-cou"  target="_blank" rel="nofollow">https://stackoverflow.com/questions/46844285/difference-between-oauth-2-0-state-and-openid-nonce-parameter-why-state-cou</a></p> <p>1、第三方应用(RP)携带参数跳转到授权服务器(OP)的认证授权页面，等待用户认证与执行授权。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f647fd203089eb06cfa7003f13e98c42.jpg" alt="理解OIDC协议和认证机制"></p> <p>2、当授权服务器(OP)完成对用户认证信息的审核和授权范围的校验，重定向回第三方应用(RP)并按照请求时的response_type返回id token、access token(当仅设置id_token时不返回)。注意url的hash部分(#后面)。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8588e55cc7cbb59b128c3028e026f76f.jpg" alt="理解OIDC协议和认证机制"></p> <p>3、后续便是请求用户信息或是授权内的资源。</p> <p></p> <h3 id="混合流程">混合流程</h3> <p>这种是将授权码和隐式流程结合起来，一部分token来源于授权服务器(OP)重定向到第三方应用(RP)时带过来，一部分来源于第三方应用(RP)向授权服务器(OP)发起请求而得到。这种流程中，response_type，可以混合着用，如code id_token，code token或是code id_token token。</p> <p>1、第三方应用(RP)向授权服务器(OP)发起认证请求。此处使用授权码和隐式中仅id_token的组合。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/64a1c3ecc3cb83e290f5104e1cd9d2b1.jpg" alt="理解OIDC协议和认证机制"></p> <p>2、当授权服务器(OP)完成对用户认证信息的审核和授权范围的校验,重定向回第三方应用(RP)并按照请求时的response_type返回id token、access token(当仅设置id_token时不返回)。</p> <ul> <li>access_token：当response_type中有token选项时，则会返回access_token</li> <li>id_token：当response_type中有id_token选项时，则会返回id_token</li> <li>code：混合流程中，这个是必选的，所以总是会返回code。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/1133736/202203/1133736-20220331223348926-1404405807.png" alt="理解OIDC协议和认证机制"></li> </ul> <p>3、第三方应用(RP)通过code来请求授权服务器(OP)换取Token。这和授权码流程一致了。</p> <p></p> <h2 id="id-token格式">Id token格式</h2> <p>认证服务返回的ID Token需要严格遵守JWT(JSON Web Token)的定义，下面是JWT(JSON Web Token)的定义细节：</p> <ul> <li><strong>iss=Issuer Identifier</strong>: 必须。认证服务的唯一标识，一个区分大小写的https URL，不包含query和fragment组件。</li> <li><strong>sub=Subject Identifier</strong>：必须。iss提供的终端用户的标识，在iss范围内唯一，最长为255个ASCII个字符，区分大小写。</li> <li><strong>aud=Audience(s)</strong>：必须。标识ID Token的受众，必须包含OAuth2的client_id，分大小写的字符串数组。</li> <li><strong>exp=Expiration time</strong>：必须。超过此时间的ID Token会作废。</li> <li><strong>iat=Issued At Time</strong>：必须。JWT的构建的时间。</li> <li><strong>auth_time=AuthenticationTime</strong>：终端用户完成认证的时间。</li> <li><strong>nonce</strong>：发送认证请求的时候提供的随机字符串，用来减缓重放攻击，也可以用来关联客户端Session。如果nonce存在，第三方应用必须验证nonce。</li> <li><strong>acr=Authentication Context Class Reference</strong>：可选。表示一个认证上下文引用值，可以用来标识认证上下文类。</li> <li><strong>amr=Authentication Methods References</strong>：可选。表示一组认证方法。</li> <li><strong>azpAuthorized party</strong>：可选。结合aud使用。只有在被认证的一方和受众（aud）不一致时才使用此值，一般情况下很少使用。<br /> 如下是一个典型ID Token的示例：</li> </ul> <pre><code class="language-json">{ &nbsp; &nbsp; "exp": 1614187991, &nbsp; &nbsp; "iss": "https://authorization-server.com/oauth", &nbsp; &nbsp; "sub": "a0903223-a120-91e0-c342-10bd237c24c1", &nbsp; &nbsp; "aud": "client1", &nbsp; &nbsp; "iat": 1614151991, &nbsp; &nbsp; "auth_time": 0, &nbsp; &nbsp; "nonce": "n-0S6_WzA2Mj", &nbsp; &nbsp; "acr": "1", &nbsp; &nbsp; "azp": "client1", &nbsp; &nbsp; "nbf": 0, &nbsp; &nbsp; "typ": "ID", &nbsp; &nbsp; "session_state": "150df80e-92a1-4b0c-a5c5-8c858eb5a848", &nbsp; &nbsp; "userId": "123456", &nbsp; &nbsp; "preferred_username": "testera", &nbsp; &nbsp; "given_name": "tester", &nbsp; &nbsp; "family_name": "a", &nbsp; &nbsp; "email": "testera@myweb.com" }</code></pre> <p>关于ID Token的更详细的定义请参见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/specs/openid-connect-core-1_0.html"  target="_blank" rel="nofollow">OpenID Connect Core 1.0</a>。</p> <p></p> <h2 id="参考">参考</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://openid.net/connect/"  target="_blank" rel="nofollow">https://openid.net/connect/</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/2c602974bc98"  target="_blank" rel="nofollow">https://www.jianshu.com/p/2c602974bc98</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://baike.baidu.com/item/OpenID?wtp=tt"  target="_blank" rel="nofollow">https://baike.baidu.com/item/OpenID?wtp=tt</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.imooc.com/article/4167"  target="_blank" rel="nofollow">http://www.imooc.com/article/4167</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/linianhui/p/openid-connect-core.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/linianhui/p/openid-connect-core.html</a></p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/news/article-81089.htm">成都宠物托管所（成都宠物托管所有哪些）</a></p>
                                                        <p>下一个：<a href="/news/article-81726.htm">养猫的人容易得15种病疾病（养猫可能引起的疾病）</a></p>
                                                    </div>

                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-50446.htm" title="Metalama简介2.利用Aspect在编译时进行消除重复代码">Metalama简介2.利用Aspect在编译时进行消除重复代码</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-2-node-share-links.htm" title="3月2日 | Stair Node节点订阅每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐">3月2日 | Stair Node节点订阅每天更新19.3M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-43472.htm" title="宠物美容师真实现状怎么写简历（宠物美容师的发展前景）">宠物美容师真实现状怎么写简历（宠物美容师的发展前景）</a></li>
                        <li class="py-2"><a href="/news/article-75577.htm" title="养猫要打哪些针（养猫半年我查出弓形虫阴性）">养猫要打哪些针（养猫半年我查出弓形虫阴性）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-clash-v2ray-ss-ssr.htm" title="2月2日 | Stair Node节点订阅每天更新21.6M/S免费节点订阅链接，付费节点订阅推荐">2月2日 | Stair Node节点订阅每天更新21.6M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-48335.htm" title="南京猫猫领养中心在哪里有（南京猫咪领养机构）">南京猫猫领养中心在哪里有（南京猫咪领养机构）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-free-high-speed-nodes.htm" title="3月15日 | Stair Node节点订阅每天更新20.1M/S免费节点订阅链接，付费节点订阅推荐">3月15日 | Stair Node节点订阅每天更新20.1M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-clash-v2ray-ss-ssr.htm" title="2月23日 | Stair Node节点订阅每天更新18.6M/S免费节点订阅链接，付费节点订阅推荐">2月23日 | Stair Node节点订阅每天更新18.6M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-38022.htm" title="动物疫苗注射后多久产生抗体（动物打疫苗后多久能杀了吃）">动物疫苗注射后多久产生抗体（动物打疫苗后多久能杀了吃）</a></li>
                        <li class="py-2"><a href="/news/article-62130.htm" title="宠物疫苗妙三多和辉瑞哪个好?（辉瑞妙三多一共打几针）">宠物疫苗妙三多和辉瑞哪个好?（辉瑞妙三多一共打几针）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">77</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        Stair Node免费订阅官网 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/website/js/frontend/stairnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/popper.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/scrollax.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>