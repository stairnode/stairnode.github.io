<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://stairnode.github.io/news/article-41482.htm" />
    <title>事务的隔离级别与MVCC</title>
        <meta name="description" content="提到数据库，你多半会联想到事务，进而还可能想起曾经背得滚瓜乱熟的ACID，不知道你有没有想过这个问题，事务有原子性、隔离性、一致性和持久性四大特性，为什么偏偏给隔离性设置了级别？  一切还得从事务说起" />
        <link rel="icon" href="/assets/website/img/stairnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Stair Node免费订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stairnode.github.io/news/article-41482.htm" />
    <meta property="og:site_name" content="Stair Node免费订阅官网" />
    <meta property="og:title" content="事务的隔离级别与MVCC" />
    <meta property="og:image" content="https://stairnode.github.io/uploads/20240805-1/3719089ff2749a8ee8abb8213db181f0.webp" />
        <meta property="og:release_date" content="2025-01-16T09:12:29" />
    <meta property="og:updated_time" content="2025-01-16T09:12:29" />
        <meta property="og:description" content="提到数据库，你多半会联想到事务，进而还可能想起曾经背得滚瓜乱熟的ACID，不知道你有没有想过这个问题，事务有原子性、隔离性、一致性和持久性四大特性，为什么偏偏给隔离性设置了级别？  一切还得从事务说起" />
        
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Poppins:100,200,300,400,500,600,700,800,900" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/animate.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/stairnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Y08WLH1WBP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Y08WLH1WBP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Stair Node</a>
                        <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav">
                                        <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link"><span>免费节点</span></a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link"><span>推荐机场</span></a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link"><span>新闻资讯</span></a></li>
                                        <li class="nav-item"><a href="#" class="nav-link"><span>关于</span></a></li>
                    <li class="nav-item"><a href="#" class="nav-link"><span>联系</span></a></li>
                </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap hero-wrap-2" style="background-image: url('/assets/website/img/stairnode/bg_4.jpg');" data-stellar-background-ratio="0.5">
        <div class="overlay"></div>
        <div class="container">
            <div class="row no-gutters slider-text align-items-end justify-content-center">
                <div class="col-md-9 ftco-animate pb-5 text-center">
                    <p class="breadcrumbs">
                        <span class="mr-2"><a href="/">首页 <i class="fa fa-chevron-right"></i></a></span> 
                        <span class="mr-2"><a href="/news/">新闻资讯 <i class="fa fa-chevron-right"></i></a></span> 
                        <span>正文</span>
                    </p>
                    <h1 class="mb-0 bread">事务的隔离级别与MVCC</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about ftco-section ftco-no-pt ftco-no-pb my-5" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>提到数据库，你多半会联想到事务，进而还可能想起曾经背得滚瓜乱熟的ACID，不知道你有没有想过这个问题，事务有原子性、隔离性、一致性和持久性四大特性，为什么偏偏给隔离性设置了级别？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c7a31f7ae98f7d7fba7ed358ba102fba.jpg" alt="事务的隔离级别与MVCC"></p> <p>一切还得从事务说起。</p> <h2 id="1-事务transaction的起源">1. 事务（transaction）的起源</h2> <p>学习数据库事务的时候，一个典型的案例就是「转账」，这篇文章也不能免俗，故事就从招财向陀螺借100块钱开始吧。</p> <p>一个看似非常简单的现实世界的状态转换，转换成数据库中的操作却并没有那么单纯。这个看起来很简单的借钱操作至少包含了两个动作：</p> <ul> <li>陀螺的账户余额-100</li> <li>招财的账户余额+100</li> </ul> <p>要保证转账操作的成功，数据库必须把这两个操作作为一个逻辑整体来执行，这个逻辑整体就是一个<strong>事务</strong>。</p> <h3 id="11-事务的定义">1.1. 事务的定义</h3> <p><strong>事务</strong>就是包含有限个（单条或多条）数据库操作（增删改查）的、最小的逻辑工作单元（不可再分）。</p> <blockquote> <p>说到这里不得不吐槽一下，事务的英文是transaction，直译为“交易”的意思，但是不知道为什么被意译成了“事务”，让人很难从字面上理解这个概念的含义。</p> <p>中国人对翻译的“信达雅”的偏执在计算机领域或多或少有点不讨喜。</p> </blockquote> <h3 id="12-哪些存储引擎支持事务">1.2. 哪些存储引擎支持事务</h3> <p>并不是所有的数据库或者所有的存储引擎都支持事务。</p> <p>对于MySQL而言，事务作为一种功能特性由存储引擎提供。目前支持事务功能的存储引擎只有<code>InnoDB</code>和<code>NDB</code>，鉴于<code>InnoDB</code>目前是MySQL默认的存储引擎，我们的研究重点自然也就是<code>InnoDB</code>存储引擎了。</p> <p>因此文章接下来默认的存储引擎就是<code>InnoDB</code>，特殊情况下会特别指出。</p> <p>那么<code>InnoDB</code>在什么情况下才会出现事务呢？</p> <h2 id="2-mysql的事务语法">2. MySQL的事务语法</h2> <p>如果你不是DBA，在平时和MySQL的交互中你可能极少直接使用到它的事务语法，一切都被编程框架封装得很好了。但是现在我们要直接使用MySQL进行事务的研究了，抛开框架，跟我稍微回顾一下语法，这是非常必要的。</p> <h3 id="21-自动提交">2.1. 自动提交</h3> <p>当我运行这样单独一条更新语句的时候，它会有事务吗？</p> <pre><code class="language-mysql">UPDATE user_innodb SET name = '蝉沐风' WHERE id = 1;</code></pre> <p>实际上，这条语句不仅会自动开启一个事务，而且执行完毕之后还会自动提交事务，并持久化数据。</p> <p>这是MySQL默认情况下使用的方式——<strong>自动提交</strong>。在此方式下，增删改的SQL语句会自动开启事务，并且是一条SQL一个事务。</p> <p>自动提交的方式虽然简单，但是对于转账这种涉及到多条SQL的业务，就不太适合了。因此，MySQL提供了手动开启事务的方法。</p> <h3 id="22-手动操作事务">2.2. 手动操作事务</h3> <h4 id="221-开启事务">2.2.1. 开启事务</h4> <p>可以使用下面两种语句开启一个事务</p> <ul> <li><code>BEGIN</code></li> <li><code>START TRANSACTION</code></li> </ul> <blockquote> <p>对比<code>BEGIN</code>而言，<code>START TRANSACTION</code>后面可以添加一些操作符，不过这不是我们的研究重点，可以不必理会。</p> </blockquote> <h4 id="222-提交或回滚">2.2.2. 提交或回滚</h4> <p>开启事务之后就可以继续编写需要放到当前事务中的SQL语句了。当写完最后一条语句，如果你觉得写得没问题，你可以提交事务；反之你后悔了，想把数据库恢复到之前的状态，你可以回滚事务。</p> <ul> <li>提交事务<code>COMMIT</code></li> <li>回滚事务<code>ROLLBACK</code></li> </ul> <h3 id="23-autocommit系统变量">2.3. autocommit系统变量</h3> <p>MySQL提供了一个叫做<code>autocommit</code>的系统变量，用来表示是否开启自动提交：</p> <pre><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE 'autocommit'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | autocommit    | ON    | +---------------+-------+</code></pre> <p><code>autocommit</code>的默认值为<code>ON</code>，表示默认开启自动提交。但是自动提交和手动操作事务并不冲突，如果不显式使用<code>BEGIN</code>或<code>START TRANSACTION</code>开启一个事务，那么InnoDB会在每一条增删改语句执行之后提交事务。</p> <p>如果我们把<code>autocommit</code>设为<code>OFF</code>，除非我们手动使用<code>BEGIN</code>或<code>START TRANSACTION</code>开启一个事务，否则InnoDB绝不会自动开启事务；同样，除非我们使用<code>COMMIT</code>或<code>ROLLBACK</code>提交或回滚事务，否则InnoDB不会自动结束事务。</p> <blockquote> <p>实际上，InnoDB会因为<strong>某些特殊语句的执行</strong>或<strong>客户端连接断开</strong>等特殊情况而导致事务自动提交（即使我们没有手动输入<code>COMMIT</code>），这种情况叫做<strong>隐式提交</strong>。</p> </blockquote> <h2 id="3-事务并发执行导致的读问题">3. 事务并发执行导致的读问题</h2> <p>MySQL会使用独立的线程处理每一个客户端的连接，这就是多线程。每个线程都可以开启事务，这就是事务的并发。</p> <p>不管是多线程的并发执行还是事务的并发执行（其实本质上是一回事儿），如果不采取点措施，都会带来一些问题。</p> <h3 id="31-脏读">3.1. 脏读</h3> <p>假设事务<code>T1</code>和<code>T2</code>并发执行，都要访问<code>user_innodb</code>表中<code>id</code>为<code>1</code>的数据，不同的是<code>T1</code>先读取数据，紧接着<code>T2</code>修改了数据的<code>name</code>字段，需要注意的是，<code>T2</code>并没有提交！</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fee991a219b6c331ac6b268654b8ec0f.jpg" alt="事务的隔离级别与MVCC"></p> <p>此时，<code>T1</code>再次执行相同的查询操作，会发现数据发生了变化，<code>name</code>字段由「王刚蛋」变成了「蝉沐风」。</p> <p>如果一个事务读到了另一个<strong>未提交事务</strong>修改过的数据，而导致了前后两次读取的数据不一致的情况，这种事务并发问题叫做<strong>脏读</strong>。</p> <h3 id="32-不可重复读">3.2. 不可重复读</h3> <p>同样是<code>T1</code>和<code>T2</code>两个事务，<code>T1</code>通过<code>id=1</code>查询到了一条数据，然后<code>T2</code>紧接着<code>UPDATE</code>（<code>DELETE</code>也可以）了该条记录，不同的是，<code>T2</code>紧接着通过<code>COMMIT</code>提交了事务。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b9f6bc3880b1b8499b83b537a946af37.jpg" alt="事务的隔离级别与MVCC"></p> <p>此时，<code>T1</code>再次执行相同的查询操作，会发现数据发生了变化，<code>name</code>字段由「王刚蛋」变成了「蝉沐风」。</p> <p>如果一个事务读到了另一个<strong>已提交事务</strong>修改过的（或者是删除的）数据，而导致了前后两次读取的数据不一致的情况，这种事务并发问题叫做<strong>不可重复读</strong>。</p> <p>看到这里是不是有点懵了？怎么读到未提交事务修改的数据是并发问题，读到已提交事务修改的数据还是并发问题呢？</p> <p>这里先不急着回答你，因为还有个幻读呢。</p> <h3 id="33-幻读">3.3. 幻读</h3> <p>还是<code>T1</code>和<code>T2</code>这俩货，<code>T1</code>先查找了所有<code>name</code>为「王刚蛋」的用户信息，此时发现拥有这个硬汉名字的用户只有一个。然后<code>T2</code>插入了一个同样叫做「王刚蛋」的用户的信息，并且提交了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6657b507d1b42d071ebea2c07eb884b0.jpg" alt="事务的隔离级别与MVCC"></p> <p>此时，<code>T1</code>再次执行相同的查询操作，发现相比上次的查询结果多了一行数据，不由得怀疑自己是不是出了幻觉。</p> <p>如果一个事务首先根据某些搜索条件P查询出一些结果，另一个事务写入（可以是<code>INSERT</code>，<code>UPDATE</code>）了一些符合搜索条件P的数据，此时前一个事务再次读取符合条件P的记录时就会获取到之前没有读取过的记录。这个现象叫做<strong>幻读</strong>。</p> <h2 id="4-回答一些可能存在的问题">4. 回答一些可能存在的问题</h2> <p>现在是中场答疑时间。</p> <blockquote> <ol> <li>一个事务读到未提交事务修改的数据不行，读到已提交事务修改的数据为什么还不行？</li> </ol> </blockquote> <p>你是不是觉得一个事务读取到其他事务最新提交的数据是一种正常现象？或者说在多数情况下这是我们期望的一种行为？没错，这种现象确实是正常的。不是说不行，而是针对我们讨论的<strong>读一致性</strong>问题上，这两种现象都算是并发问题，因为谈这个问题的时候我们已经把语境固定死了，就是在<strong>同一个事务中</strong>的前后两次<code>SELECT</code>的操作结果不该和其他事务产生瓜葛，否则就是出现了读一致性问题。</p> <blockquote> <ol start="2"> <li>我只听说过事务的一致性，没听说过读一致性</li> </ol> </blockquote> <p>事务在并发执行时一共有下面3种情况：</p> <ul> <li>读-读：并发事务相继读取相同记录，由于读取操作本身不会改变记录的值，因此这种情况下自然不会有并发问题；</li> <li>读-写/写-读：一个事务进行读取操作，另一个事务进行写（增删改）操作；</li> <li>写-写：并发事务相继对相同记录进行写（增删改）操作。</li> </ul> <p>不知道你有没有注意到上一节的标题是「事务并发执行导致的<strong>读问题</strong>」。并且脏读、不可重复读和幻读都是在读-写/写-读的情况下出现的，那写-写情况怎么办？</p> <p>一切的并发问题都可以通过串行化解决，但是串行化效率太低了！</p> <p>再优化一下，一切并发问题都可以通过加锁来解决，这种方案我们称为<strong>基于锁的并发控制</strong>（<strong>Lock Bases Concurrency Control</strong>,<strong>LBCC</strong>）！但是在读多写少的环境下，客户端连读取几条记录都需要排队，效率还是太低了！</p> <p>难不成数据库有避免给读操作加锁就可以解决一致性问题的方法？没错，接下来我们要讲的就是这个方法，所以我们才把一致性问题分为读一致性和写一致性，而写一致性就得依赖数据库的锁机制了。</p> <p>心急吃不了热豆腐，这篇文章先给你讲明白读一致性问题。</p> <blockquote> <ol start="3"> <li>不可重复读和幻读的最大区别是什么？</li> </ol> </blockquote> <p>这个问题的答案在网上五花八门，要回答这个问题自然要找官方了。这个官方不是MySQL官方，而是美国国家标准协会（ANSI）。</p> <p>我们上面谈到的脏读、不可重复读和幻读问题都是理论知识，并不涉及到具体的数据库。考虑到所有数据库在设计的过程中都可能遇到这些问题，ANSI就制定了一个SQL标准，其中最著名的就是<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt"  target="_blank" rel="nofollow">SQL92标准</a>，其中定义了「不可重复读」和「幻读」（当然也定义了脏读，但鉴于没啥异议，我就没截图），我把其中的重点单词给大家标注了一下，希望大家能彻底搞懂两者的区别。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/037f62f49cebfd2cae35d3c9ed1086f1.jpg" alt="事务的隔离级别与MVCC"></p> <p>我用中文翻译一下就是：</p> <p>不可重复读：事务<code>T1</code>读取了一条记录，事务<code>T2</code><strong>修改</strong>或者<strong>删除</strong>了同一条记录，<strong>并且提交</strong>。如果事务<code>T1</code>试图再次读取同一条记录的时候，会读到被事务<code>T2</code>修改的数据或者压根读不到。</p> <p>幻读：事务<code>T1</code>首先读取了符合某些搜索条件P的一些记录。然后事务<code>T2</code>执行了某些SQL语句<strong>产生了</strong>符合搜索条件P的一条或多条记录。如果事务<code>T1</code>再次读取符合条件P的记录，将会得到不同于之前的数据集。</p> <p>SQL标准对于不可重复读已经说得很清楚了，事务<code>T2</code>要对<code>T1</code>读取的记录进行修改或者删除操作，并且必须要提交事务。但是对于幻读的定义就说得很模糊，尤其是文中使用了<code>generate（生成/产生）</code>，再结合<code>one or more rows</code>，我们可以认为事务<code>T2</code>执行了<code>INSERT</code>语句插入了之前没有读到的记录，或者是执行了更新记录键值的<code>UPDATE</code>语句生成了符合<code>T1</code>之前的搜索条件的记录，总之只要是事务<code>T1</code>之前没有读到的数据，都算是幻影数据，至于事务<code>T2</code>需不需要提交压根儿没提。</p> <h2 id="5-sql标准与4种隔离级别">5. SQL标准与4种隔离级别</h2> <p>如果按照对一致性影响的严重程度，对上面提到的3种并发读问题排个序的话，就是下图这样：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0de880458b545ff64ae576d147499d06.jpg" alt="事务的隔离级别与MVCC"></p> <p>我们刚才也提到了，这3种并发读问题都是理论知识，并不涉及到具体的数据库。因此SQL标准再次发挥了作用，他们建议数据库厂家按照他们的规范，提供给用户4种隔离级别，让用户根据自己的业务需要权衡利弊，选择合适的隔离级别，以此解决所有的并发读问题（脏读、不可重复读、幻读）或者对某些无关紧要的并发读问题做出妥协。</p> <p>SQL标准中定义的隔离级别有如下4种：</p> <ul> <li><code>READ UNCOMMITTED</code>：未提交读</li> <li><code>READ COMMITTED</code>：已提交读</li> <li><code>REPEATABLE READ</code>：可重复读</li> <li><code>SERIALIZABLE</code>：串行化</li> </ul> <p>SQL标准中规定，针对不同的隔离级别，并发事务执行过程中可以发生不同的并发读问题。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4716720b53e250ba178552b270b3af92.jpg" alt="事务的隔离级别与MVCC"></p> <p>其中绿色箭头表示隔离级别由弱到强，红色箭头表示并发问题的严重程度由弱变强。翻译一下上面的表格就是：</p> <ul> <li>在<code>READ UNCOMMITTED</code>隔离级别下，脏读、不可重复读和幻读都有可能发生。也就是这种隔离级别啥也没干；</li> <li>在<code>READ COMMITTED</code>隔离级别下，不可能发生脏读现象，但是不可重复读和幻读有可能发生；</li> <li>在<code>REPEATABLE READ</code>隔离级别下，可能发生幻读现象，但是绝不可能发生脏读和不可重复读；</li> <li>在<code>SERIALIZABLE</code>隔离级别下，上述所有现象都不可能发生。</li> </ul> <p>说完这些，有些人可能像当时的我一样，依旧是懵的。为什么要设置隔离级别？事务<code>T1</code>读到其他事务最新修改的数据难道不好吗？为什么这些隔离级别的中文翻译这么蹩脚，感觉好不通顺啊。为什么单单给隔离性设置了级别？</p> <h3 id="51-为什么要设置隔离级别">5.1. 为什么要设置隔离级别？</h3> <p>说实话，我至今还没遇到过需要我手动修改MySQL隔离级别的业务，而且我也相信，短时间也不会出现这种场景。我相信大部分开发者也是一样。因此，在没有机会实战的情况下，要能记住隔离级别的这个概念，必须从需求出发，来理解为什么需要隔离级别。</p> <p>我举一个例子，假设你有一个账单系统，每个月底需要对你所有的客户的借贷操作和账户余额进行对账。对此你写了一个定时任务，每个月初1号的00:00:00时刻开始启动对账业务，由于是只对上个月的业务进行对账，所以该时刻之后所有的对该用户账户的写操作都不应该对对账事务的读操作可见。</p> <p>现在你知道并不是任何情况下都要读取到最新修改的数据了吧。</p> <h3 id="52-蹩脚的中文翻译">5.2. 蹩脚的中文翻译</h3> <p>至于中文蹩脚的问题，纯属是我个人揣测的了。因为直到现在我都觉得隔离级别的中文翻译不顺口，因此猜测可能读这篇文章的其中一个你也会和我有同样的问题呢。我的办法就是直接用英文代替中文翻译，纯属个人方法，不好使不要怪我。</p> <h3 id="53-为什么单单给隔离性设置了级别">5.3. 为什么单单给隔离性设置了级别？</h3> <p>终于聊到了为什么单单给隔离性设置了级别这个问题了。如果想想事务的4个特性，也就自然明白这个问题了。</p> <p><strong>原子性</strong></p> <p>简单总结就是一个事务中的语句，要么全部执行成功，要么全部执行失败，不允许存在中间状态。所以对于原子性没有级别可以设置，我们总不能提出至少有80%的SQL语句执行成功这种无理的要求吧。</p> <p><strong>一致性</strong></p> <p>一致性是事务的最终目标。简而言之就是数据库的数据操作之后的最终结果符合我们的预期，符合现实世界的规定。比如，陀螺账户里有100块钱，招财分文无有，不管陀螺借给招财多少次，招财分成多少次还，他俩的账户总额必须是100，有借必有贷，借贷必相等，这就是一致性。</p> <p>呃。。。好像也没找到可以商量商量打个折扣的点。</p> <p><strong>持久性</strong></p> <p>这个特性最简单，就是要把事务的所有写操作持久化到磁盘。我们自然也不可能提出至少80%的写操作被持久化到磁盘这样傻兮兮的要求吧。</p> <p><strong>隔离性</strong></p> <p>我们唯独可以在这个隔离性上做点手脚。</p> <p>以新冠疫情为例。疫情紧张的时候，我们最常听到的词就是隔离，虽然都是隔离，却有居家隔离、方舱隔离、酒店单间隔离之分。</p> <p>再举个例子，你和邻居以墙相隔，这是一种很强的隔离性。但是某一天，你凿壁偷了个光，你们两家依然是有隔离性的，毕竟墙还在那立着呢，但是隔离性显然没有原来那么强了。</p> <p>说到这儿，不知道你理解了吗？</p> <h2 id="6-mysql支持的4种隔离级别">6. MySQL支持的4种隔离级别</h2> <p>标准归标准，不同的数据库厂商或者存储引擎对标准的实现有一定的差异。比如Oracle数据库只提供了<code>READ COMMITTED</code>和<code>SERIALIZABLE</code>两种隔离级别。</p> <p>说回MySQL。 InnoDB支持的4个隔离级别和SQL标准定义的完全一致，隔离级别越高，事务的并发程度就越低，但是出现并发问题的概率就越小。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cf8705d7bfd1943cc9d197ac77eb6e1e.jpg" alt="事务的隔离级别与MVCC"></p> <p>上图中还有非常重要的一点，就是InnoDB在<code>REPEATABLE READ</code>隔离级别下，在很大程度上就解决了幻读的问题，让幻读的发生成为一种小概率事件。在这一点上InnoDB不仅完成了SQL标准，一定程度上也可以说是超越了标准。因此，<code>REPEATABLE READ</code>也成了InnoDB默认的隔离级别。</p> <p>那什么时候幻读还会发生呢？我举个例子。我用两个终端分别开启两个MySQL会话，每个会话中开启了一个事务，并且保证了每个会话的事务隔离级别都是<code>REPEATABLE READ</code>。</p> <pre><code class="language-mysql"># 事务T1首先开启事务 mysql&gt; BEGIN;  # 事务T1搜索id为1的记录，结果集为空 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; Empty set (0.01 sec)  # 事务T2插入一条id为1的记录，并且提交事务 # INSERT INTO user_innodb VALUES(1,'wanggangdan',0); # COMMIT;  # 事务T1在重新搜索之前，修改一下事务T2刚插入的那条记录 mysql&gt; UPDATE user_innodb SET name = 'chanmufeng' WHERE id = 1; Query OK, 1 row affected (0.03 sec)  # 事务T1再搜索id为1的记录，发现多了一条记录 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+------------+--------+ | id | name       | gender | +----+------------+--------+ |  1 | chanmufeng |      0 | +----+------------+--------+ 1 row in set (0.00 sec)</code></pre> <p>要说清楚这个问题就牵扯到MySQL锁的知识了，这个以后再说，知道这么回事儿就行了。</p> <p>回到我们的主线。我们现在想让事务在自己的一亩三分地儿里随便折腾，其他事务的增删改操作我不想知道（或者我想知道，就放开一下隔离级别）。怎么办？</p> <p>或许你用过<code>git</code>？</p> <p>我们用<code>git</code>进行开发任务的时候，通常情况下都会自己创建一个分支，在自己的分支上完成自己的任务，这样和其他开发者不会造成冲突。我们可以借鉴一下这个思路。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/373dc3deb88c8cb5ef5e22ea06097380.jpg" alt="事务的隔离级别与MVCC"></p> <p><code>git</code>的每个分支都有一个分支id，那事务也该有自己的唯一标识吧，这是自然的，下面稍微回顾一下行格式。</p> <h2 id="7-再聊行格式">7. 再聊行格式</h2> <p>为什么叫再聊？因为我之前好几篇文章都提到了行格式，你要是早点读到那几篇文章也就不用我再说一遍了。（所以赶紧关注我公众号啊。。。[旺柴]）。</p> <p>但是总有些新朋友嘛。</p> <h3 id="71-简易版行格式">7.1. 简易版行格式</h3> <p>你存入MySQL的每一条记录都会以某一种MySQL提供的行格式来进行存储，具体有哪些行格式我不打算说明，你也没必要记住，他们之间的最大区别只是对磁盘占用率的优化程度不同罢了。</p> <p>我们把所有行格式的公有部分拿出来，总之，一条用户数据可以用下面的图来表示</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/03cb2ce63c5c6098f1e5d8d47ca15f52.jpg" alt="事务的隔离级别与MVCC"></p> <blockquote> <p>注：图中标识的字段顺序和实际MySQL的字段存储顺序并不一致，这样画是为了能更清晰地说明问题。</p> </blockquote> <ul> <li><code>roll_pointer</code>：是我们接下来聊的重点，这里先不管它；</li> <li><code>trx_id</code>：它就是事务id了，每条用户记录都有这个字段。千万不要忘了一个至关重要的前提，我们用的存储引擎是InnoDB；</li> <li>其他：就不用多说了吧。</li> </ul> <h3 id="72-分配事务id的时机">7.2. 分配事务id的时机</h3> <p>对于读写事务而言，只有在它第一次对某个表进行<strong>增删改</strong>操作时，才会为这个事务分配一个事务id，否则不会分配。</p> <p>更特殊地，如果一个读写事务中全是查询语句，没有增删改的操作，这个事务也不会被分配事务id。</p> <p>如果不分配事务id，事务id的值默认为<code>0</code>。</p> <h2 id="8-mvcc登场">8. MVCC登场</h2> <h3 id="81-版本链">8.1. 版本链</h3> <p>当一个事务<code>T1</code>读到了一条记录，我们当然希望能禁止其他事务对该条记录进行修改和删除的操作，直到<code>T1</code>结束，但是这种满足一己之私的行为在并发领域是要遭到唾骂的。这严重拖系统后腿啊。</p> <p>于是InnoDB的设计者提出了一种和<code>git</code>类似的想法，每对记录做一次修改操作，都要记录一条修改之前的日志，并且该日志还保存了当前事务的id，和行格式类似，这条日志也有一个<code>roll_pointer</code>节点。</p> <blockquote> <p>实际InnoDB的这个功能和git没有半毛钱关系，这里单纯为了类比。</p> </blockquote> <p>当对同一条记录更新的次数多了，所有的这些日志会被<code>roll_pointer</code>属性连接成一个单链表，这个链表就是版本链，而版本链的头节点就是当前记录的最新值。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0acd803fb200247248b17474017afb0b.jpg" alt="事务的隔离级别与MVCC"></p> <blockquote> <p>注：这种日志的格式和普通记录的格式其实并不相同，上图中我们只关注两者之间共同的部分。</p> </blockquote> <p>上图展示了一条记录的版本链。该条记录的最初始版本是由id为<code>21</code>的事务进行<code>UPDATE</code>得到的（大家可以想一下，这里为什么不可能是<code>INSERT</code>呢？）</p> <p>后来，这条记录分别被事务<code>280</code>和事务<code>300</code>各自连续<code>UPDATE</code>了两次。这里有个细节，事务<code>280</code>和事务<code>300</code>并没有交叉着更新这条记录，这是为什么呢？也留给亲爱的你思考吧。</p> <p>InnoDB正是利用这个版本链来控制不同事务访问相同记录的行为，这种机制就是MySQL大名鼎鼎的<code>MVCC</code>（Multi-Version Concurrency Control），多版本并发控制。</p> <p>而上文中我们一直提及的日志，就是大名鼎鼎的<code>undo</code>日志。</p> <blockquote> <p>除了标题，在正文中我尽量没有提及<code>MVCC</code>术语，可把我憋坏了。因为对于没有了解过这个概念的读者而言，这个术语确实有点让人害怕。不过看到这儿的话，是不是觉得也不过如此呢？</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/66905f3149f8144a13602c81487ec4de.jpg" alt="事务的隔离级别与MVCC"></p> <p>接下来就是看一下MySQL的各个隔离级别是怎么利用<code>MVCC</code>的。</p> <h3 id="82-readview">8.2. ReadView</h3> <p><code>READ UNCOMMITTED</code>隔离级别啥也不是，脏读、不可重读和幻读问题一个都解决不了，所以干脆在这个隔离级别下直接读取记录的最新版本就得了。</p> <p>而<code>SERIALIZALE</code>隔离级别又矫枉过正，必须得用锁机制才能实现，所以就先按下不表了。</p> <p>对于使用<code>READ COMMITTED</code>和<code>REPEATABLE READ</code>隔离级别的事务而言，决不允许发生脏读现象（忘记了的话再回去看看表格），也就是说如果事务<code>T2</code>已经修改了记录但是没有提交，那<code>T1</code>就不能直接读取<code>T2</code>修改之后的内容。</p> <p>现在的核心问题就是，怎么判断版本链中的哪个版本是当前事务可见的。</p> <p>为此，InnoDB的设计者提出了<code>ReadView</code>的概念，其中包含了4个比较重要的内容：</p> <ul> <li><code>m_ids</code>：生成<code>ReadView</code>时，当前系统中活跃的读写事务id列表；</li> <li><code>min_trx_id</code>：生成<code>ReadView</code>时，当前系统中活跃的读写事务中最小的事务id，也就是<code>m_ids</code>中的最小值；</li> <li><code>max_trx_id</code>：生成<code>ReadView</code>时，待分配给下一个事务的id号；</li> <li><code>creator_trx_id</code>：生成当前<code>ReadView</code>的事务的事务id。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/90b1886a84deeed354a9855e29279aa5.jpg" alt="事务的隔离级别与MVCC"></p> <p>有了<code>ReadView</code>这个数据结构，事务判断可见性的规则就是这样的：</p> <ol start="0"> <li>从版本链中的最新版本开始判断</li> <li>如果被访问版本的<code>trx_id = creator_trx_id</code>，说明这个版本就是当前事务修改的，允许访问；</li> <li>如果被访问版本的<code>trx_id &lt; min_trx_id</code>（未提交事务的最小id），说明生成这个版本的事务在当前<code>ReadView</code>生成之前就已经提交了，允许访问；</li> <li>如果被访问版本的<code>trx_id &gt; max_trx_id</code>（待分配的事务id），说明生成这个版本的事务是在当前ReadView生成之后建立的，不允许访问；</li> <li>如果被访问版本的<code>trx_id</code>在<code>min_trx_id</code>和<code>max_trx_id</code>之间，那就需要判断<code>trx_id</code>是否在<code>m_ids</code>之中，如果在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问。否则，可以访问；</li> <li>如果当前版本不可见，就沿着版本链找到下一个版本，重复上面的1～4步。</li> </ol> <p><code>READ COMMITTED</code>和<code>REPEATABLE READ</code>隔离级别之间的不同之处就是生成<code>ReadView</code>的时机不同。接下来具体看一下它们之间的区别。</p> <h4 id="821-read-committed">8.2.1. READ COMMITTED</h4> <p><code>READ COMMITTED</code>是每次读取数据之前都生成一个<code>ReadView</code>。</p> <p>我们来做个实验，实验之前先看一下我们的目标记录现在的值：</p> <pre><code class="language-mysql">mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+-------------+--------+ | id | name        | gender | +----+-------------+--------+ |  1 | wanggangdan |      1 | +----+-------------+--------+</code></pre> <p>假设系统中有两个事务id分别为<code>100</code>，<code>200</code>的事务<code>T1</code>、<code>T2</code>在执行：</p> <pre><code class="language-mysql"># 事务T1(100)开始执行 mysql&gt; BEGIN;  mysql&gt; UPDATE user_innodb SET name = 'chanmufeng' WHERE id = 1; mysql&gt; UPDATE user_innodb SET name = 'zhaosi' WHERE id = 1;  # 注意，事务T1(100)并没有提交</code></pre> <pre><code class="language-mysql"># 事务T2(200)开始执行 mysql&gt; BEGIN;  # 做了其他表的一些增删改操作  # 注意，事务T2(200)并没有提交</code></pre> <p>此时，表<code>user_innodb</code>中id为1的记录的版本链的形式如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6a7a2515500842737e24f371f31158d9.jpg" alt="事务的隔离级别与MVCC"></p> <p>接下来我们在新的会话中将隔离级别设置为<code>READ COMMITTED</code>，并开始事务<code>T3</code></p> <pre><code class="language-mysql"># 在新的会话中设置SESSION级别的隔离级别，这种设置方式对当前会话的后续所有事务生效 mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;  # 查看当前会话默认的隔离级别，发现是READ-COMMITTED，说明设置成功 mysql&gt; SHOW VARIABLES LIKE 'transaction_isolation'; +-----------------------+----------------+ | Variable_name         | Value          | +-----------------------+----------------+ | transaction_isolation | READ-COMMITTED | +-----------------------+----------------+  # T3开启事务 mysql&gt; BEGIN;  # T3查询id为1的记录信息，发现是最原始的、事务T1修改之前的版本 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+-------------+--------+ | id | name        | gender | +----+-------------+--------+ |  1 | wanggangdan |      1 | +----+-------------+--------+</code></pre> <p>我们对照着上文说过的可见性判断规则，来捋一遍整个流程：</p> <ol> <li><code>T3</code>执行<code>SELECT</code>时会首先生成一个<code>ReadView</code>数据结构，这个<code>ReadView</code>的信息如下 <ul> <li><code>m_ids</code>列表的内容是<code>[100,200]</code></li> <li><code>min_trx_id</code>为<code>100</code></li> <li><code>max_trx_id</code>为<code>201</code>（这里我们假设待分配给下一个事务就是<code>201</code>）</li> <li><code>creator_trx_id</code>为<code>0</code>（因为事务<code>T3</code>只是<code>SELECT</code>而已，没有做增删改操作，所以事务id为<code>0</code>）</li> </ul> </li> <li>从版本链中的最新版本开始判断；</li> <li>最新版本的<code>trx_id</code>是<code>100</code>，在<code>min_trx_id</code>和<code>max_trx_id</code>之间，继续判断<code>trx_id</code>是否在<code>m_ids</code>之中，发现在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问，根据链表找到下一个版本；</li> <li>当前版本的<code>trx_id</code>是<code>100</code>，不允许访问，理由同上，继续跳到下一个版本；</li> <li>当前版本的<code>trx_id</code>是<code>99</code>，小于<code>min_trx_id</code>值<code>100</code>，所以当前版本对<code>T3</code>可见，返回的数据就是<code>name</code>为'wanggangdan'的这条记录。</li> </ol> <p>接着，实验继续，我们把<code>T1</code>提交一下：</p> <pre><code class="language-mysql"># 事务T1提交 mysql&gt; COMMIT;</code></pre> <p>然后在事务<code>T2</code>中（目前还没有提交）再次更新id为1的记录</p> <pre><code class="language-mysql"># 事务T2继续执行id为1的记录的更新操作，但是依然不提交 mysql&gt; UPDATE user_innodb SET name = 'wangwu' WHERE id = 1; mysql&gt; UPDATE user_innodb SET name = 'wanger' WHERE id = 1;</code></pre> <p>现在，版本链就变成了这个样子：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3c576674050cae52826ecf28ec4ed0a5.jpg" alt="事务的隔离级别与MVCC"></p> <p>最后在事务<code>T3</code>中重新执行查询，再来看一下结果集会是什么：</p> <pre><code class="language-mysql"># 事务T3再次执行查询 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+--------+--------+ | id | name   | gender | +----+--------+--------+ |  1 | zhaosi |      1 | +----+--------+--------+</code></pre> <p>我们来捋一下这次的查询的执行过程：</p> <ol> <li> <p>因为<code>T3</code>的隔离级别是<code>READ COMMITTED</code>，所以再次执行查询会重新生成一个<code>ReadView</code>，此时这个<code>ReadView</code>里边的信息如下：</p> <ul> <li><code>m_ids</code>列表的内容是<code>[200]</code>，因为<code>T1</code>已经提交了</li> <li><code>min_trx_id</code>为<code>200</code></li> <li><code>max_trx_id</code>为<code>201</code>（这里我们假设待分配给下一个事务就是<code>201</code>）</li> <li><code>creator_trx_id</code>为<code>0</code>（因为事务<code>T3</code>只是<code>SELECT</code>而已，没有做增删改操作，所以事务id为<code>0</code>）</li> </ul> </li> <li> <p>从版本链中的最新版本开始判断；</p> </li> <li> <p>最新版本的<code>trx_id</code>是<code>200</code>，在<code>min_trx_id</code>和<code>max_trx_id</code>之间，继续判断<code>trx_id</code>是否在<code>m_ids</code>之中，发现在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问，根据链表找到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>200</code>，不允许访问，理由同上，继续跳到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>100</code>，小于<code>min_trx_id</code>值<code>200</code>，所以当前版本对<code>T3</code>可见，返回的数据就是<code>name</code>为'zhaosi'的这条记录。</p> </li> </ol> <p>重点就是：<strong><code>READ COMMITTED</code>在每次SELECT的时候都重新生成一个ReadView。</strong></p> <blockquote> <p>注意，在做实验的时候如果长时间未操作终端，可能导致和MySQL服务器的连接自动断开，连接一旦断开，事务会自动进行提交。做实验的小伙伴需要注意一下。</p> </blockquote> <h4 id="822-repeatable-read">8.2.2. REPEATABLE READ</h4> <p>学会了<code>READ COMMITTED</code>，<code>REPEATABLE READ</code>也是同样的道理了，唯一的区别是：</p> <p><strong><code>REPEATABLE READ</code>只会在第一次执行<code>SELECT</code>的时候生成一个<code>ReadView</code>，之后不管<code>SELECT</code>多少次，都是用最开始生成的<code>ReadView</code>中的变量进行判断。</strong></p> <p>还是拿上面的事务id为<code>100</code>和<code>200</code>的事务为例，在实验之前，先将数据重置到最初的状态。</p> <pre><code class="language-mysql">mysql&gt; UPDATE user_innodb SET name = 'wanggangdan' WHERE id = 1;</code></pre> <p>事务<code>T1</code>先执行：</p> <pre><code class="language-mysql"># 事务T1(100)开始执行 mysql&gt; BEGIN;  mysql&gt; UPDATE user_innodb SET name = 'chanmufeng' WHERE id = 1; mysql&gt; UPDATE user_innodb SET name = 'zhaosi' WHERE id = 1;  # 注意，事务T1(100)并没有提交</code></pre> <pre><code class="language-mysql"># 事务T2(200)开始执行 mysql&gt; BEGIN;  # 做了其他表的一些增删改操作  # 注意，事务T2(200)并没有提交</code></pre> <p>此时，表<code>user_innodb</code>中id为1的记录的版本链的形式如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6a7a2515500842737e24f371f31158d9.jpg" alt="事务的隔离级别与MVCC"></p> <p>接下来我们在新的会话中将隔离级别设置为<code>REPEATABLE READ</code>，并开始事务<code>T3</code></p> <pre><code class="language-mysql"># 在新的会话中设置SESSION级别的隔离级别，这种设置方式对当前会话的后续所有事务生效 mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;  # 查看当前会话默认的隔离级别，发现是READ-COMMITTED，说明设置成功 mysql&gt; SHOW VARIABLES LIKE 'transaction_isolation'; +-----------------------+-----------------+ | Variable_name         | Value           | +-----------------------+-----------------+ | transaction_isolation | REPEATABLE-READ | +-----------------------+-----------------+  # T3开启事务 mysql&gt; BEGIN;  # T3查询id为1的记录信息，发现是最原始的、事务T1修改之前的版本 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+-------------+--------+ | id | name        | gender | +----+-------------+--------+ |  1 | wanggangdan |      1 | +----+-------------+--------+</code></pre> <p>现在捋这个流程你应该已经熟悉很多了：</p> <ol> <li><code>T3</code>初次执行<code>SELECT</code>时会生成一个<code>ReadView</code>数据结构，这个<code>ReadView</code>的信息如下 <ul> <li><code>m_ids</code>列表的内容是<code>[100,200]</code></li> <li><code>min_trx_id</code>为<code>100</code></li> <li><code>max_trx_id</code>为<code>201</code>（这里我们假设待分配给下一个事务就是<code>201</code>）</li> <li><code>creator_trx_id</code>为<code>0</code>（因为事务<code>T3</code>只是<code>SELECT</code>而已，没有做增删改操作，所以事务id为<code>0</code>）</li> </ul> </li> <li>从版本链中的最新版本开始判断；</li> <li>最新版本的<code>trx_id</code>是<code>100</code>，在<code>min_trx_id</code>和<code>max_trx_id</code>之间，继续判断<code>trx_id</code>是否在<code>m_ids</code>之中，发现在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问，根据链表找到下一个版本；</li> <li>当前版本的<code>trx_id</code>是<code>100</code>，不允许访问，理由同上，继续跳到下一个版本；</li> <li>当前版本的<code>trx_id</code>是<code>99</code>，小于<code>min_trx_id</code>值<code>100</code>，所以当前版本对<code>T3</code>可见，返回的数据就是<code>name</code>为'wanggangdan'的这条记录。</li> </ol> <p>接着，实验继续，我们把<code>T1</code>提交一下：</p> <pre><code class="language-mysql"># 事务T1提交 mysql&gt; COMMIT;</code></pre> <p>然后在事务<code>T2</code>中（目前还没有提交）再次更新id为1的记录</p> <pre><code class="language-mysql"># 事务T2继续执行id为1的记录的更新操作，但是依然不提交 mysql&gt; UPDATE user_innodb SET name = 'wangwu' WHERE id = 1; mysql&gt; UPDATE user_innodb SET name = 'wanger' WHERE id = 1;</code></pre> <p>现在，版本链就变成了这个样子：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3c576674050cae52826ecf28ec4ed0a5.jpg" alt="事务的隔离级别与MVCC"></p> <p>最后在事务<code>T3</code>中重新执行查询，再来看一下结果集会是什么：</p> <pre><code class="language-mysql"># 事务T3再次执行查询 mysql&gt; SELECT * FROM user_innodb WHERE id = 1; +----+-------------+--------+ | id | name        | gender | +----+-------------+--------+ |  1 | wanggangdan |      1 | +----+-------------+--------+</code></pre> <p>我们来捋一下这次的查询的执行过程：</p> <ol> <li> <p>因为<code>T3</code>的隔离级别是<code>REPEATABLE READ</code>，所以还是沿用一开始生成的那个<code>ReadView</code>，再抄一遍：</p> <ul> <li><code>m_ids</code>列表的内容是<code>[100,200]</code></li> <li><code>min_trx_id</code>为<code>100</code></li> <li><code>max_trx_id</code>为<code>201</code></li> <li><code>creator_trx_id</code>为<code>0</code></li> </ul> </li> <li> <p>从版本链中的最新版本开始判断；</p> </li> <li> <p>最新版本的<code>trx_id</code>是<code>200</code>，在<code>min_trx_id</code>和<code>max_trx_id</code>之间，继续判断<code>trx_id</code>是否在<code>m_ids</code>之中，发现在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问，根据链表找到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>200</code>，不允许访问，理由同上，继续跳到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>100</code>，在<code>min_trx_id</code>和<code>max_trx_id</code>之间，继续判断<code>trx_id</code>是否在<code>m_ids</code>之中，发现在，说明生成当前<code>ReadView</code>时，生成该版本的事务还是活跃的，因此不允许访问，根据链表找到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>100</code>，不允许访问，理由同上，继续跳到下一个版本；</p> </li> <li> <p>当前版本的<code>trx_id</code>是<code>99</code>，小于<code>min_trx_id</code>值<code>100</code>，所以当前版本对<code>T3</code>可见，返回的数据就是<code>name</code>为'wanggangdan'的这条记录。</p> </li> </ol> <p>也就是说，<code>READ COMMITTED</code>隔离级别下，<code>T3</code>前后两次<code>SELECT</code>得到的结果完全一致，跟其他事务提交不提交没有关系，即使事务<code>T2</code>后来也提交了，也不影响<code>T3</code>的搜索结果。怎么样，是不是一致性的程度比<code>READ COMMITTED</code>更强了呢？</p> <hr/> <p>好了，到目前为止你已经知道怎么利用MVCC来解决一致性读问题了，但是写一致性该怎么办呢？那就是下一篇事务的隔离级别与锁的内容了。敬请关注喽。</p> 			
                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/news/article-41481.htm">vuex几大模块和Vuex助手使用详解</a></p>
                                                        <p>下一个：<a href="/news/article-41986.htm">MySQL连接查询，内连接，外连接，全连接，交叉连接</a></p>
                                                    </div>

                                        </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-27998.htm" title="docker-compose ports 与 expose 的区别">docker-compose ports 与 expose 的区别</a></li>
                        <li class="py-2"><a href="/news/article-33687.htm" title="开宠物店不赚钱（开宠物店累不累）">开宠物店不赚钱（开宠物店累不累）</a></li>
                        <li class="py-2"><a href="/news/article-28462.htm" title="沈阳宠物免费领养赠送猫（沈阳免费领养猫咪）">沈阳宠物免费领养赠送猫（沈阳免费领养猫咪）</a></li>
                        <li class="py-2"><a href="/news/article-19690.htm" title="沈阳芭比堂宠物怎么样知乎（芭比堂宠物医院朝阳北路）">沈阳芭比堂宠物怎么样知乎（芭比堂宠物医院朝阳北路）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-2-free-node-subscribe.htm" title="1月2日 | Stair Node节点订阅每天更新20.6M/S免费节点订阅链接，付费节点订阅推荐">1月2日 | Stair Node节点订阅每天更新20.6M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-38022.htm" title="动物疫苗注射后多久产生抗体（动物打疫苗后多久能杀了吃）">动物疫苗注射后多久产生抗体（动物打疫苗后多久能杀了吃）</a></li>
                        <li class="py-2"><a href="/news/article-19234.htm" title="经营动物疫苗小规模企业税率是多少啊（经营动物疫苗药品需要什么手续）">经营动物疫苗小规模企业税率是多少啊（经营动物疫苗药品需要什么手续）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-2-free-subscribe-node.htm" title="12月2日 | Stair Node节点订阅每天更新20.8M/S免费节点订阅链接，付费节点订阅推荐">12月2日 | Stair Node节点订阅每天更新20.8M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-4-free-node-subscribe-links.htm" title="11月4日 | Stair Node节点订阅每天更新22.7M/S免费节点订阅链接，付费节点订阅推荐">11月4日 | Stair Node节点订阅每天更新22.7M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-37039.htm" title="宠物粮食加工厂设备有哪些品牌好一点（宠物粮食加工厂设备有哪些品牌好一点的）">宠物粮食加工厂设备有哪些品牌好一点（宠物粮食加工厂设备有哪些品牌好一点的）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        Stair Node免费订阅官网 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/website/js/frontend/stairnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/popper.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/stairnode/scrollax.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
    <script src="/assets/website/js/frontend/stairnode/google-map.js"></script>
    <script src="/assets/website/js/frontend/stairnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>